datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id             String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    username       String        @unique
    fullname       String?
    isAdmin        Boolean       @default(false)
    Media          Media[]
    organizationId String?       @db.Uuid
    organization   Organization? @relation(fields: [organizationId], references: [id])
    Project        Project[]
}

model Organization {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name        String
    slug        String    @unique
    description String?
    User        User[]
    Project     Project[]
}

enum MediaType {
    IMAGE
    VIDEO
    AUDIO
    PPT
    PDF
}

model Project {
    id             String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name           String
    description    String?
    code           Int          @unique @default(autoincrement())
    createdById    String       @default(dbgenerated("auth.uid()")) @db.Uuid
    createdBy      User         @relation(fields: [createdById], references: [id])
    createdAt      DateTime     @default(now()) @db.Timestamp()
    organization   Organization @relation(fields: [organizationId], references: [id])
    organizationId String       @db.Uuid
    Timestamp      Timestamp[]
}

model Timestamp {
    id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    name              String?
    description       String?
    projectId         String             @db.Uuid
    project           Project            @relation(fields: [projectId], references: [id])
    order             Int
    isActive          Boolean            @default(true)
    TimestampMediaMap TimestampMediaMap?
}

model TimestampMediaMap {
    id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    timestampId String    @db.Uuid
    timestamp   Timestamp @relation(fields: [timestampId], references: [id])
    mediaId     String    @db.Uuid
    media       Media     @relation(fields: [mediaId], references: [id])

    @@unique([mediaId])
    @@unique([timestampId])
}

model Media {
    id                String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
    type              MediaType
    createdAt         DateTime           @default(now()) @db.Timestamp()
    createdById       String             @default(dbgenerated("auth.uid()")) @db.Uuid
    createdBy         User               @relation(fields: [createdById], references: [id], onDelete: Cascade)
    metadata          Json?
    path              String
    bucketName        String
    TimestampMediaMap TimestampMediaMap?
}
